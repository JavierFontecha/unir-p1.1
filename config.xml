<?xml version='1.1' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@1472.ve4d5eca_143c4">
  <actions>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobAction plugin="pipeline-model-definition@2.2218.v56d0cda_37c72"/>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction plugin="pipeline-model-definition@2.2218.v56d0cda_37c72">
      <jobProperties/>
      <triggers/>
      <parameters/>
      <options/>
    </org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction>
  </actions>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties/>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@4000.v5198556e9cea_">
    <script>pipeline {
    agent any

    stages {
        stage(&apos;prepare&apos;){
            steps {
                git &apos;https://github.com/JavierFontecha/unir-p1.1.git&apos;
            }
        }
        stage(&apos;build&apos;) {
            steps {
                echo &apos;No hago nada&apos;
                sh &apos;ls&apos;
            }
        }

        
        stage(&apos;unit&apos;) {
            steps {
                catchError(buildResult: &apos;UNSTABLE&apos;, stageResult: &apos;FAILURE&apos;) {
                    sh &apos;&apos;&apos;
                        python3.11 -m venv venv
                        . venv/bin/activate
                        pip install -r requirements/requirements.txt
                        export PYTHONPATH=.
                        pytest --junitxml=result.unit.xml test/unit
                    &apos;&apos;&apos;
                }
            }
        }
        
        stage(&apos;rest&apos;) {
            steps{
                sh &apos;&apos;&apos;
                    . venv/bin/activate
                    export FLASK_APP=app/api.py
                    flask run
                    export PYTHONPATH=.
                    pytest --junitxml=result.unit.xml test/rest
                
                &apos;&apos;&apos;
            }
            
        }
        
        stage(&apos;results&apos;) {
            steps{
                junit &apos;result*.xml&apos;
            }
            
        }
    }
}
</script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
  <disabled>false</disabled>
</flow-definition>